// 1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
// 2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
// 3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
// 4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
// 5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
// 6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
//      만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
// 7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.

function solution(new_id) {
  const answer = new_id
    .toLowerCase() // 1. 대분자를 소문자로 치환
    .replace(/[^a-z0-9-_.]/g, '') // 2. 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 문자 제거
    .replace(/\.+/g, '.') // 3. "."이 반복되는 경우 "." 한개만 표시
    .replace(/^\.|\.$/g, '') // 4. "."가 처음이나 끝에 위치할 경우 제거
    .replace(/^$/, 'a') // 5. 빈문자열의 경우 "a"를 대입
    .slice(0, 15) // 6. 길이가 16 이상인 경우를 생각해서, 15개 문자열만 잘라서 표시
    .replace(/\.$/, ''); // 6-1. 길이가 16 이상인 경우, 15개 문자열을 표시했을때, 마지막에 "."이 오는 경우 제거

  return answer.length <= 2 ? answer.padEnd(3, answer[answer.length - 1]) : answer;
  // 7. 길이가 2자 이하인 경우, 마지막 문자를 채워 길이 3을 만들기
}

// 문제설명
// 주어진 문자열을 요구사항의 7단계에 맞춰서 변환한 후 반환하는 문제
// 정규표현식과 replace 매서드를 사용하여 문제로, 요구사항의 순서에 맞춰 진행함.

// 정규표현식에서 "\"은 뒤에 오는 의미를 갖는 문자를 일반 문자 취급을 해주고 "+"는 "+" 앞의 문자열이 한번 이상 반복됨을 표시.
// "^" 특정문자열로 시작을 의미, "$" 특정문자열로 끝을 의미
