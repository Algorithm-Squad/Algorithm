// https://leetcode.com/problems/house-robber/

const rob = function (nums) {
  // 집이 0개일 때
  if (nums.length === 0) {
    return 0;
  }

  // 집이 1개일 때
  if (nums.length === 1) {
    return nums[0];
  }

  // 집이 2개일 때
  if (nums.length === 2) {
    return Math.max(nums[0], nums[1]);
  }

  // 집이 3개 이상일 때
  // dp[i] : i번째 집까지 훔칠 수 있는 최대 금액
  const dp = [nums[0], Math.max(nums[0], nums[1])];
  for (let i = 2; i < nums.length; i++) {
    // i번째 집까지 훔칠 수 있는 최대 금액은
    // i번째 집을 훔칠 경우와 훔치지 않을 경우 중 큰 금액이다.
    dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i]);
    console.log(dp);
  }

  return dp[nums.length - 1];
};

console.log(rob([10, 1, 2, 3, 4, 20]));

// 매개변수
// nums : 집마다의 돈이 담긴 배열

// 출력
// 가장 많은 돈을 훔칠 수 있는 금액

// 문제 설명 및 해결
// 각 집마다 돈이 담긴 배열 nums가 주어졌을 때, 훔칠 수 있는 가장 큰 금액을 구하는 문제이다.
// 제약 조건은 인접한 두 집을 침입할 수 없다는 것이다.
// 이 문제를 해결하기 위해서는 DP를 사용해야 한다.
// DP 문제를 해결하기 위해서는 문제를 작은 문제로 나누어야 한다.
// 먼저 0번째, 1번째, 2번째 집까지 훔칠 수 있는 최대 금액을 구해보자.
// 0번째 집까지 훔칠 수 있는 최대 금액은 0번째 집의 돈이다.
// 1번째 집까지 훔칠 수 있는 최대 금액은 0번째 집과 1번째 집 중에서 더 많은 금액이다.
// i번째 집까지 훔쳤을 때의 최대금액을 dp 배열에 저장한다.
// 그리고 2번째 집까지 훔칠 수 있는 최대 금액은 0번째 집과 2번째 집을 훔치는 경우와 1번째 집을 훔치는 경우 중에서 더 많은 금액이다.
// 3번째 집의 최대 금액은 1번째 집까지 훔친 최대금액 + 3번째 집의 돈과 2번째 집까지 훔친 최대금액 중에서 더 많은 금액이다.
// 즉, i번째 까지 훔친 금액을 DP에 저장하고 새롭게 만나는 집(i)의 금액과 i-2 집까지 훔친 금액의 합과 i-1 집까지 훔친 금액 중에서 더 많은 금액이 dp[i]가 된다.
// 그리고 최종적으로 마지막 집까지 훔칠 수 있는 최대 금액을 구하고 나면 dp 배열의 마지막 요소가 가장 많은 금액을 훔칠 수 있는 금액이 된다.
