/**
 * 시작시간: 14:15
 * 종료시간: 14:45 -> 실패
 *
 * K칸 점프 -> K 만큼 건전지 사용량 감소
 * 순간이동 -> 건전지 사용량 감소x
 *
 * ex.
 * N: 5
 * 0에서 1 점프 -> 순간이동 1 * 2 = 2 -> 순간이동 2 * 2 = 4 -> 점프 4 + 1 = 5
 * => 점프 2회 === 2
 *
 * N: 6
 * 0에서 1 점프 -> 순간이동 1 * 2 = 2 -> 점프 2 + 1 = 3 -> 순간이동 3 * 2 = 6
 * => 점프 2회 === 2
 *
 * N: 7
 * 0에서 1 점프 -> 순간이동 1 * 2 = 2 -> 점프 2 + 1 = 3 -> 순간이동 3 * 2 = 6 -> 점프 6 + 1 = 7
 *
 * @param {number} n
 *
 * @returns {number}
 */

const solution = (n) => {};

console.log(solution(5)); // 2
console.log(solution(6)); // 2
console.log(solution(5000)); // 5

/**
 * 시작시간: 10:15
 * 종료시간: 10:40
 *
 * * 거꾸로 생각해보자.
 * 만약 N=100일 때, 100까지 도달하기 위해서는 0에서 어떻게든 50까지 도달하면 된다. 50에서 100까지는 순간이동하면 되기 때문이다.
 * 50까지 도달하기 위해서는 25까지 도달하면 된다. 25에서는 마찬가지로 순간이동면 된다.
 * 하지만, 25를 2로 나누면 0으로 나누어 떨어지지 않는다. 그렇다면, 이 경우에는 24까지 도달하고, 24에서 1만큼 점프해서 25까지 도달하면 된다.
 * 24에 오기 위해서는 12까지 도달하면 되고, 12에 오기 위해서는 6까지 도달하면 되고, 6에 오기 위해서는 3까지 도달하면 되고,
 * 3에 오기 위해서는 2로 나누어 떨어지지 않으므로 2에서 3까지 점프를 하면 된다.
 * 2에 오기 위해서는 1까지 도달하면 되고, 1에 오기 위해서는 0에서 1까지 점프를 하면 된다.
 * 그럼 N=100에 도달하기 위해서, 최소 3번의 점프를 하면 목적지에 도달할 수 있게 된다.
 *
 * @param {number} n
 *
 * @returns {number}
 */

const solution2 = (n) => {
  let answer = 0;
  while (n !== 0) {
    if (n % 2) {
      n /= 2;
    } else {
      n -= 1;
      answer++;
    }
  }
  return answer;
};

console.log(solution2(5)); // 2
console.log(solution2(6)); // 2
console.log(solution2(5000)); // 5
