// https://school.programmers.co.kr/learn/courses/30/lessons/250135

// 전체 시간을 초로 변환하는 함수
function toSeconds(h, m, s) {
  return h * 3600 + m * 60 + s;
}

// 시, 분, 초를 각각 각도로 변환하는 함수
function getDegree(h, m, s) {
  const hDegree = (h % 12) * 30 + m * 0.5 + s * (1 / 120);
  const mDegree = m * 6 + s * 0.1;
  const sDegree = s * 6;
  return [hDegree, mDegree, sDegree];
}

// 시침과 초침이 겹치는지 확인하는 함수
// index 0은 각 시간의 시침의 각도, 1은 분침의 각도 분침, 2는 초침의 각도 초침
function hourMatch(currentTime, nextTime) {
  // 현재 시간 시침 각도가 현재 시간 초침보다 크고 다음 시간 시침 각도가 다음 시간 초침보다 작거나 같으면
  // 시침은 초침을 지나쳤다는 의미이며 이는 곧 시침과 초침이 겹친다는 의미이다.
  if (currentTime[0] > currentTime[2] && nextTime[0] <= nextTime[2]) {
    return true;
  }

  // 현재 시간 초침 각도가 354도이고 현재 시간 시침 각도가 354도보다 크면 ->
  // 시침이 354도보다 큰 각도에 있음은 시침이 거의 정각 위치(0도 또는 360도)에 가까워지고 있지만,
  // 아직 정각을 지나지 않았음을 의미한다.
  // 즉, 현재 시간 초침 각도가 354도이고 현재 시간 시침 각도가 354도보다 크면
  // 다음 시간이 되면, 시침과 초침이 겹치게 된다.
  if (currentTime[2] === 354 && currentTime[0] > 354) {
    return true;
  }
  return false;
}

// 분침과 초침이 겹치는지 확인하는 함수
// index 0은 각 시간의 시침의 각도, 1은 분침의 각도, 2는 초침의 각도
function minuteMatch(currentTime, nextTime) {
  // 현재 시간 분침 각도가 현재 시간 초침보다 크고 다음 시간 분침 각도가 다음 시간 초침보다 작거나 같으면
  // 분침은 초침을 지나쳤다는 의미이며 이는 곧 분침과 초침이 겹친다는 의미이다.
  if (currentTime[1] > currentTime[2] && nextTime[1] <= nextTime[2]) {
    return true;
  }
  // 현재 시간 부침 각도가 354도이고 현재 시간 초침 각도가 354도보다 크면 ->
  // 분침이 354도보다 큰 각도에 있음은 분침이 거의 정각 위치(0도 또는 360도)에 가까워지고 있지만,
  // 아직 정각을 지나지 않았음을 의미한다.
  // 즉, 현재 시간 초침 각도가 354도이고 현재 시간 분침 각도가 354도보다 크면
  // 다음 시간이 되면, 분침과 초침이 겹치게 된다.
  if (currentTime[2] === 354 && currentTime[1] > 354) {
    return true;
  }
  return false;
}

function solution(h1, m1, s1, h2, m2, s2) {
  let answer = 0;
  const start = toSeconds(h1, m1, s1);
  const end = toSeconds(h2, m2, s2);

  // 시작시간부터 끝시간까지 1초씩 증가시키며 시침과 분침, 초침이 겹치는지 확인
  for (let i = start; i < end; i++) {
    // 현재 시간의 시침, 분침, 초침 각도
    const currentTime = getDegree(
      Math.floor(i / 3600),
      Math.floor((i % 3600) / 60),
      i % 60
    );

    // 다음 시간의 시침, 분침, 초침 각도
    const nextTime = getDegree(
      Math.floor((i + 1) / 3600),
      Math.floor(((i + 1) % 3600) / 60),
      (i + 1) % 60
    );

    // 시침과 초침이 겹치는지 확인
    const hMatch = hourMatch(currentTime, nextTime);
    // 분침과 초침이 겹치는지 확인
    const mMatch = minuteMatch(currentTime, nextTime);

    // 만약 시침과 초침이 겹치고 분침과 초침이 겹치면
    if (hMatch && mMatch) {
      // 다음 시간의 시침과 분침이 겹치면
      // 알람은 한번만 울리기 때문에, answer에 1을 더해준다.
      if (nextTime[0] === nextTime[1]) answer++;
      // 그렇지 않는 경우에는, 각각 시침과 초침, 분침과 초침이 겹치기 때문에 answer에 2를 더해준다.
      else answer += 2;
    } else if (hMatch || mMatch) {
      // 시침과 초침, 분침과 초침 각각 하나만 겹칠 때는 answer에 1을 더해준다.
      answer++;
    }
  }

  // 만약 시작시간이 0초이거나 12시인 경우에는 시작과 동시에 알람이 한번 울리기 때문에 answer에 1을 더해준다.
  if (start === 0 || start === 43200) answer++;
  return answer;
}

console.log(solution(0, 5, 30, 0, 7, 0)); // 2

// 매개변수
// h1 : 시작 시간의 시
// m1 : 시작 시간의 분
// s1 : 시작 시간의 초
// h2 : 끝 시간의 시
// m2 : 끝 시간의 분
// s2 : 끝 시간의 초

// 출력
// 시작 시간과 끝 시간 사이에 초침이 시침 혹은 분침과 겹치면서 알람이 몇번 울리는지 반환

// 문제 설명 및 해결
// 시침, 분침, 초침이 있는 아날로그 시계가 있고, 시계의 시침은 12시간마다,
// 분침은 60분마다, 초침은 60초마다 시계를 한 바퀴 돈다. 초침이 시침과 분침과
// 겹칠때 알람이 울린다고 했을 때, 시작시간에서 끝시간까지 총 알람이 몇 번 울리는지
// 반환하는 문제다.

// 1초당 움직이는 초침, 분침, 시침의 각도
// 초침 : 360 / 60초 -> 6도
// 분침 : 분침은 1시간에 360도를 움직이므로, 1시간을 60분으로 나누면 1분에 6도씩 움직입니다.
// 그리고 1분은 60초이므로, 1초당 분침은 6 / 60 = 0.1도 움직입니다.
// 시침 :시계의 시침은 1시간에 360도(한 바퀴)를 움직입니다. 12시간 시계에서는 12시간 동안 360도를 움직이므로
// 1시간에 360 / 12 = 30도 즉, 1시간에 30도를 움직이고 1시간은 3600초이기 때문에,
// 1초에는 30 / 3600 = 0.008333도(1/120)를 움직입니다.

// 1분당 움직이는 초침, 분침, 시침의 각도
// 초침 : 360도
// 분침 : 6도
// 시침 : 0.5도

// 1시간당 움직이는 초침, 분침, 시침의 각도
// 초침 : -
// 분침 : 360도
// 시침 : 30도

// 위에서 각 초, 분당 몇 도씩 움직이는지를 알아냈으니, 주어진 시간만으로 모든 침들의 현재 각도를 계산할 수 있다.
// 만약 주어진 시간이 02:43:45라고 일때는, 아래와 같이 계산할 수 있다.

// 초침  = 45 x 6 = 270도
// 분침 = (43 x 6) + (45 x 0.1) = 258 + 4.5 = 262.5도
// 시침 = (2 x 30) + (43 x 0.5) + (45 x 1/120)) = 60 + 21.5 + 0.375 = 81.875도

// 이를 일반화하면 다음과 같다.

// 초침  = (6 * s)
// 분침 = (6 * m) + (0.1 * s)
// 시침 = ((h % 12) x 30) + (0.5 * m) + ((1/120) * s)

// 문제 풀이는 다음과 같다.
// 먼저 시작 시간과 끝 시간을 초로 변환한다.
// 그리고 시작 시간부터 끝 시간까지 1초씩 증가시키며 시침과 분침, 초침이 겹치는지 확인한다.
// 시침과 초침이 겹치는지 확인하는 함수와 분침과 초침이 겹치는지 확인하는 함수를 만들었고,
// 이를 통해 시침과 초침, 분침과 초침이 겹치는지 확인했다.
// 만약 시침과 초침이 겹치고 분침과 초침이 겹치면 알람은 한번만 울리기 때문에 answer에 1을 더해준다.
// 그렇지 않은 경우에는 각각 시침과 초침, 분침과 초침이 겹치기 때문에 answer에 2를 더해준다.
// 만약 시침과 초침, 분침과 초침 각각 하나만 겹칠 때는 answer에 1을 더해준다.
// 만약 시작시간이 0초이거나 12시인 경우에는 시작과 동시에 알람이 한번 울리기 때문에 answer에 1을 더해준다.

// 참고 : https://howudong.tistory.com/437#article-1-2--%EC%A3%BC%EC%96%B4%EC%A7%84-%EC%8B%9C%EA%B0%84%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%B9%A8%EC%9D%98-%EA%B0%81%EB%8F%84-%EA%B3%84%EC%82%B0
